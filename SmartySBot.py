# -*- coding: utf-8 -*-
from bs4 import BeautifulSoup
import requests
import telebot
import datetime
import sqlite3
import os
import settings

#  __________________________________________________ROZKLAD__________________________________________________________


def get_rozklad(faculty='', teacher='', group='', sdate='', edate=''):

    med_url = 'http://46.219.3.50:8080/cgi-bin/timetable.cgi?n=700'
    med_groups = ['302—Å—Å/–±–∞–∫\n', ]

    http_headers = {
            'User-Agent': settings.HTTP_USER_AGENT,
            'Accept': 'text/html',
    }

    try:
        post_data = {
            'faculty': faculty,
            'teacher': teacher.encode('windows-1251'),
            'group': group.encode('windows-1251'),
            'sdate': sdate,
            'edate': edate,
            'n': 700,
        }
    except Exception as ex:

        log(m='–ü–æ–º–∏–ª–∫–∞ –≤ —Ä–æ–±–æ—Ç—ñ —ñ–∑ —Å–ª–æ–≤–Ω–∏–∫–æ–º post_data - {}\n'.format(str(ex)))
        return False

    try:

        if group in med_groups:
            page = requests.post(med_url, post_data, headers=http_headers)
        else:
            page = requests.post(settings.TIMETABLE_URL, post_data, headers=http_headers, timeout=5)
    except Exception as ex:

        log(m='–ü–æ–º–∏–ª–∫–∞ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º - {}\n'.format(str(ex)))
        return False

    parsed_page = BeautifulSoup(page.content, 'html.parser')
    all_days_list = parsed_page.find_all('div', class_='col-md-6')[1:]
    all_days_lessons = []

    for day_table in all_days_list:
        all_days_lessons.append({
            'day': day_table.find('h4').find('small').text,
            'date': day_table.find('h4').text[:10],
            'lessons': [' '.join(lesson.text.split()) for lesson in day_table.find_all('td')[1::2]]
        })

    return all_days_lessons

#  ____________________________________________________BOT__________________________________________________________
connection = sqlite3.connect(os.path.join(settings.BASE_DIR, settings.DATABASE_NAME), check_same_thread=False)

bot = telebot.TeleBot(settings.BOT_TOKEN)

keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
keyboard.row('\U0001F4D7 –°—å–æ–≥–æ–¥–Ω—ñ', '\U0001F4D8 –ó–∞–≤—Ç—Ä–∞', '\U0001F4DA –ù–∞ —Ç–∏–∂–Ω—ñ')
keyboard.row('\U0001F464 –ü–æ –≤–∏–∫–ª–∞–¥–∞—á—É', '\U0001F570 –ß–∞—Å –ø–∞—Ä', '\U0001F465 –ü–æ –≥—Ä—É–ø—ñ')
keyboard.row('\U00002699 –ó–º. –≥—Ä—É–ø—É', '\U0001F308 –ü–æ–≥–æ–¥–∞', '\U0001f4ac –î–æ–≤—ñ–¥–∫–∞')

emoji_numbers = ['0‚É£', '1‚É£', '2‚É£', '3‚É£', '4‚É£', '5‚É£', '6‚É£', '7‚É£', '8‚É£', '9‚É£']


def log(chat=None, m=''):

    now_time = datetime.datetime.now().strftime('%d-%m %H:%M:%S')

    with open(os.path.join(settings.BASE_DIR, 'bot_log.txt'), 'a') as log_file:
        if chat:
            log_file.write('[{}]: ({} {}) {}\n'.format(now_time, chat.first_name, chat.last_name, m))
        else:
            log_file.write('[{}]: (Server) {}\n'.format(now_time, m))

    if not chat:
        return

    try:
        cursor = connection.cursor()
        cursor.execute("""UPDATE users SET requests_count=requests_count+1, last_use_date=?, first_name=?, last_name=? 
        WHERE t_id=?""", (now_time, chat.first_name, chat.last_name, chat.id))
        connection.commit()
        cursor.close()

    except Exception as ex:
        log(m='–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ' + str(ex))


def create_database():

    cursor = connection.cursor()
    cursor.execute("""CREATE TABLE IF NOT EXISTS users(
                      t_id TEXT PRIMARY KEY NOT NULL,
                      username TEXT,
                      first_name TEXT,
                      last_name TEXT,
                      u_group TEXT,
                      register_date TEXT,
                      last_use_date TEXT,
                      requests_count INTEGER DEFAULT 0) WITHOUT ROWID""")
    connection.commit()
    cursor.close()


def get_user_group(user_id):

    try:
        cursor = connection.cursor()
        cursor.execute("""SELECT u_group FROM users WHERE t_id=?""", (user_id,))
        connection.commit()
        user_group = cursor.fetchone()
        cursor.close()
    except Exception as ex:
        connection.rollback()
        log(m='–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≥—Ä—É–ø–∏ - {}'.format(str(ex)))
        return False

    if not user_group:
        return False
    return user_group[0]


def add_or_update_user_to_db(chat, group):

    if not get_user_group(chat.id):

        now_time = datetime.datetime.now().strftime('%d-%m-%Y %H:%M:%S')
        try:
            cursor = connection.cursor()
            cursor.execute("INSERT INTO users (t_id, username, first_name, last_name, u_group, register_date) "
                           "VALUES (?, ?, ?, ?, ?, ?)",
                           (chat.id, chat.username, chat.first_name, chat.last_name, group, now_time))
            connection.commit()
            cursor.close()

            log(chat=chat, m='–≤–∫–∞–∑–∞–≤ —Å–≤–æ—é –≥—Ä—É–ø—É - {}'.format(group))

        except Exception as ex:
            connection.rollback()
            log(m='–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - {}'.format(str(ex)))

    else:

        try:
            cursor = connection.cursor()
            cursor.execute("""UPDATE users SET u_group=? WHERE t_id=?""", (group, chat.id))
            connection.commit()
            cursor.close()
            log(chat=chat, m='–∑–º—ñ–Ω–∏–≤ —Å–≤–æ—é –≥—Ä—É–ø—É –Ω–∞ - {}'.format(group))

        except Exception as ex:
            connection.rollback()
            log(m='–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –≥—Ä—É–ø–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - {}'.format(str(ex)))


def show_day_rozklad(day_data):

    rozklad = '.....::::: <b>\U0001F4CB {}</b> ({}) :::::.....\n\n'.format(day_data['day'], day_data['date'][:-5:])

    lessons = day_data['lessons']

    for i in range(8):
        if lessons[i]:
            s_index = i
            break

    for i in range(7, -1, -1):
        if lessons[i]:
            e_index = i
            break

    for i in range(s_index, e_index + 1):
        if lessons[i]:
            rozklad += '{} {}\n\n'.format(emoji_numbers[i + 1], lessons[i])
        else:
            rozklad += '{} –í—ñ–∫–Ω–æ \U0001F643\n\n'.format(emoji_numbers[i + 1])

    return rozklad


@bot.message_handler(commands=['start'])
def start(message):
    sent = bot.send_message(message.chat.id, '–ô–æ—É, {} üòä. –Ø –ë–æ—Ç —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ —à–≤–∏–¥–∫–æ –¥—ñ–∑–Ω–∞–≤–∞—Ç–∏—Å—å —Å–≤—ñ–π —Ä–æ–∑–∫–ª–∞–¥ –ø—Ä—è–º–æ —Ç—É—Ç.'
                                             ' –î–ª—è –ø–æ—á–∞—Ç–∫—É —Å–∫–∞–∂–∏ –º–µ–Ω—ñ —Å–≤–æ—é –≥—Ä—É–ø—É (–ù–∞–ø—Ä. 44_—ñ_–¥)'.format(message.chat.first_name))
    bot.register_next_step_handler(sent, set_group)


def set_group(message):

    if message.text == '–í—ñ–¥–º—ñ–Ω–∞':
        user_group = get_user_group(message.chat.id)
        bot.send_message(message.chat.id, '–î–æ–±—Ä–µ, –∑–∞–ª–∏—à–∏–º–æ –≥—Ä—É–ø—É {}.'.format(user_group), reply_markup=keyboard)
        return

    if ' ' in message.text:
        bot.send_message(message.chat.id, '–ì—Ä—É–ø–∞ –≤–∫–∞–∑—É—î—Ç—å—Å—è –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤. –ê —Ç–æ—á–Ω–æ —Ç–∞–∫, —è–∫ –Ω–∞ —Å–∞–π—Ç—ñ.',
                         reply_markup=keyboard)
        return

    add_or_update_user_to_db(message.chat, message.text)

    bot.send_message(message.chat.id, '–ß—É–¥–æ–≤–æ üëç, –≤—ñ–¥—Ç–µ–ø–µ—Ä —è –±—É–¥—É –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –¥–ª—è –≥—Ä—É–ø–∏ {}.'.
                     format(message.text), reply_markup=keyboard)


@bot.message_handler(regexp='^(\d{1,2})\.(\d{1,2})$')
def to_date(message):

    group = get_user_group(message.chat.id)

    if not group:
        bot.send_message(message.chat.id, '–©–æ–± –≤–∫–∞–∑–∞—Ç–∏ –≥—Ä—É–ø—É –∂–º–∏ -> /start')
        return

    date = message.text + '.' + settings.YEAR
    rozklad_data = get_rozklad(group=group, edate=date, sdate=date)

    log(chat=message.chat, m='–†–æ–∑–∫–ª–∞–¥ –ø–æ –¥–∞—Ç—ñ {}'.format(date))

    if rozklad_data:
        rozklad_for_date = show_day_rozklad(rozklad_data[0])
    else:
        msg = '–©–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –¥–µ–Ω—å, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ –æ–¥–Ω–æ–º—É —ñ–∑ —Ç–∞–∫–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤:' \
              '\n<b>05.03</b>\n<b>27.03</b>\n<b>5.3</b>' \
              '\n–î–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ –∫—ñ–ª—å–∫–æ–º –¥–Ω—è–º (—Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –Ω–µ –±—ñ–ª—å—à–µ 8 –¥–Ω—ñ–≤ –ø—ñ–¥—Ä—è–¥):\n<b>20.03-22.03</b>\n' \
              '\n<i>–í–≤–æ–¥–∏—Ç—å—Å—è –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤ (–¥–µ–Ω—å.–º—ñ—Å—è—Ü—å)</i><b> —Ä—ñ–∫ –≤–≤–æ–¥–∏—Ç–∏ –Ω–µ —Ç—Ä–µ–±–∞</b> ' \
              '<i>–Ø–∫—â–æ —Ä–æ–∑–∫–ª–∞–¥ –ø–æ –∫—ñ–ª—å–∫–æ–º –¥–Ω—è–º –Ω–µ –ø—Ä–∞—Ü—é—î - –≤–≤–µ–¥—ñ—Ç—å –º–µ–Ω—à—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤.</i>'
        rozklad_for_date = '–ù–∞ <b>{}</b>, –¥–ª—è –≥—Ä—É–ø–∏ <b>{}</b> –ø–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n\n{}'.format(date, group, msg)

    bot.send_message(message.chat.id, rozklad_for_date, parse_mode='HTML', reply_markup=keyboard)


@bot.message_handler(regexp='^(\d{1,2})\.(\d{1,2})-(\d{1,2})\.(\d{1,2})$')
def from_date_to_date(message):

    group = get_user_group(message.chat.id)

    if not group:
        bot.send_message(message.chat.id, '–©–æ–± –≤–∫–∞–∑–∞—Ç–∏ –≥—Ä—É–ø—É –∂–º–∏ -> /start')
        return

    _sdate = message.text.split('-')[0] + '.' + settings.YEAR
    _edate = message.text.split('-')[1] + '.' + settings.YEAR

    rozklad_data = get_rozklad(group=group, sdate=_sdate, edate=_edate)

    rozklad_for_days = ''

    log(chat=message.chat, m='–†–æ–∑–∫–ª–∞–¥ –ø–æ –¥–∞—Ç–∞—Ö {}'.format(message.text))

    if rozklad_data:
        for rozklad_day in rozklad_data:
            rozklad_for_days += show_day_rozklad(rozklad_day)

    else:
        msg = '–©–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –¥–µ–Ω—å, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ –æ–¥–Ω–æ–º—É —ñ–∑ —Ç–∞–∫–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤:' \
              '\n<b>05.03</b>\n<b>27.03</b>\n<b>5.3</b>' \
              '\n–î–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ –∫—ñ–ª—å–∫–æ–º –¥–Ω—è–º (—Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –Ω–µ –±—ñ–ª—å—à–µ 8 –¥–Ω—ñ–≤ –ø—ñ–¥—Ä—è–¥):\n<b>20.03-22.03</b>\n' \
              '\n<i>–í–≤–æ–¥–∏—Ç—å—Å—è –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤ (–¥–µ–Ω—å.–º—ñ—Å—è—Ü—å)</i><b> —Ä—ñ–∫ –≤–≤–æ–¥–∏—Ç–∏ –Ω–µ —Ç—Ä–µ–±–∞.</b> ' \
              '<i>–Ø–∫—â–æ —Ä–æ–∑–∫–ª–∞–¥ –ø–æ –∫—ñ–ª—å–∫–æ–º –¥–Ω—è–º –Ω–µ –ø—Ä–∞—Ü—é—î - –≤–≤–µ–¥—ñ—Ç—å –º–µ–Ω—à—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤.</i>'
        rozklad_for_days = '–ù–∞ <b>{}-{}</b>, –¥–ª—è –≥—Ä—É–ø–∏ <b>{}</b> –ø–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n\n{}'.format(_sdate, _edate,
                                                                                                group, msg)

    bot.send_message(message.chat.id, rozklad_for_days, parse_mode='HTML', reply_markup=keyboard)


def get_teachers_name(surname):

    rez = []

    for teacher in settings.TEACHERS:
        if teacher.split()[0].upper() == surname.upper():
            rez.append(teacher)

    return rez


def show_teachers(chat_id, name):

    in_week = datetime.date.today() + datetime.timedelta(days=7)

    in_week_day = in_week.strftime('%d.%m.%Y')
    today = datetime.date.today().strftime('%d.%m.%Y')

    rozklad_data = get_rozklad(teacher=name, sdate=today, edate=in_week_day)

    rozklad_for_week = ''

    if rozklad_data:
        rozklad_for_week = '–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å —É <b>{}</b>:\n\n'.format(name)
        for rozklad_day in rozklad_data:
            rozklad_for_week += show_day_rozklad(rozklad_day)
    else:
        rozklad_for_week = '–ù–∞ —Ç–∏–∂–¥–µ–Ω—å –ø–∞—Ä —É –≤–∏–∫–ª–∞–¥–∞—á–∞ <b>{}</b> –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.'.format(name)

    bot.send_message(chat_id, rozklad_for_week, reply_markup=keyboard, parse_mode='HTML')


def select_teacher_from_request(message):  # —Ñ-—è –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∫–æ–ª–∏ —î 2 —ñ –±—ñ–ª—å—à–µ –≤–∏–∫–ª–∞–¥–∞—á—ñ –∑ —Ç–∞–∫–∏–º –ø—Ä—ñ–∑–≤–∏—â–µ–º

    if message.text == '–ù–∞–∑–∞–¥':
        bot.send_message(message.chat.id, '–û–∫–µ–π)', reply_markup=keyboard)
        return

    show_teachers(message.chat.id, message.text)


def select_teachers(message):

    tchrs = get_teachers_name(message.text)

    if not tchrs:
        bot.send_message(message.chat.id, '–ù–µ –º–æ–∂—É –∑–Ω–∞–π—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞ –∑ —Ç–∞–∫–∏–º –ø—Ä—ñ–∑–≤–∏—â–µ–º.',
                         reply_markup=keyboard)

    if len(tchrs) == 1:
        show_teachers(message.chat.id, tchrs[0])

    if len(tchrs) > 1:

        teachers_keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for teacher in tchrs:
            teachers_keyboard.row(teacher)

        teachers_keyboard.row('–ù–∞–∑–∞–¥')
        sent = bot.send_message(message.chat.id, '–í–∏–±–µ—Ä–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞:', reply_markup=teachers_keyboard)
        bot.register_next_step_handler(sent, select_teacher_from_request)


@bot.message_handler(content_types=["text"])
def main_menu(message):

    bot.send_chat_action(message.chat.id, "typing")

    if get_user_group(message.chat.id):

        log(message.chat, '> {}'.format(message.text))

        if message.text == '\U0001F4D7 –°—å–æ–≥–æ–¥–Ω—ñ':
            group = get_user_group(message.chat.id)
            rozklad_data = get_rozklad(group=group)

            if rozklad_data:
                rozklad_for_today = show_day_rozklad(rozklad_data[0])
            else:
                rozklad_for_today = "–ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –ø–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

            bot.send_message(message.chat.id, rozklad_for_today, parse_mode='HTML', reply_markup=keyboard)

        elif message.text == '\U0001F4D8 –ó–∞–≤—Ç—Ä–∞':

            tomorrow = datetime.date.today() + datetime.timedelta(days=1)
            tom_day = tomorrow.strftime('%d.%m.%Y')

            group = get_user_group(message.chat.id)
            rozklad_data = get_rozklad(group=group, sdate=tom_day, edate=tom_day)

            if rozklad_data:
                rozklad_for_tom = show_day_rozklad(rozklad_data[0])
            else:
                rozklad_for_tom = '–ù–∞ –∑–∞–≤—Ç—Ä–∞ –ø–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.'

            bot.send_message(message.chat.id, rozklad_for_tom, parse_mode='HTML', reply_markup=keyboard)

        elif message.text == '\U0001F4DA –ù–∞ —Ç–∏–∂–Ω—ñ':

            in_week = datetime.date.today() + datetime.timedelta(days=7)

            in_week_day = in_week.strftime('%d.%m.%Y')
            today = datetime.date.today().strftime('%d.%m.%Y')

            group = get_user_group(message.chat.id)
            rozklad_data = get_rozklad(group=group, sdate=today, edate=in_week_day)

            rozklad_for_week = ''

            if rozklad_data:
                for rozklad_day in rozklad_data:
                    rozklad_for_week += show_day_rozklad(rozklad_day)
            else:
                rozklad_for_week = '–ù–∞ —Ç–∏–∂–¥–µ–Ω—å –ø–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.'

            if len(rozklad_for_week) < 4100:
                bot.send_message(message.chat.id, rozklad_for_week, parse_mode='HTML', reply_markup=keyboard)

            else:
                rozklad_for_week = ''

                for rozklad_day in rozklad_data[1:]:
                    rozklad_for_week += show_day_rozklad(rozklad_day)

                bot.send_message(message.chat.id, rozklad_for_week, parse_mode='HTML', reply_markup=keyboard)

        elif message.text == '\U0001F570 –ß–∞—Å –ø–∞—Ä':
            lessons_time = "<b>–ß–∞—Å –ø–∞—Ä:</b>\n" \
                           "{} 08:30-09:50\n{} 10:00-11:20\n" \
                           "{} 11:40-13:00\n{} 13:10-14:30\n" \
                           "{} 14:40-16:00\n{} 16:20-17:40 \n" \
                           "{} 17:50-19:10\n{} 19:20-20:40".format(emoji_numbers[1], emoji_numbers[2], emoji_numbers[3],
                                                                   emoji_numbers[4], emoji_numbers[5], emoji_numbers[6],
                                                                   emoji_numbers[7], emoji_numbers[8])

            bot.send_message(message.chat.id, lessons_time, parse_mode='HTML', reply_markup=keyboard)

        elif message.text == '\U00002699 –ó–º. –≥—Ä—É–ø—É':

            user_group = get_user_group(message.chat.id)

            cancel_kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            cancel_kb.row('–í—ñ–¥–º—ñ–Ω–∞')

            msg = '–¢–≤–æ—è –≥—Ä—É–ø–∞: {}\n–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –≤–≤–µ–¥–∏ –Ω–æ–≤—É –≥—Ä—É–ø—É'.format(user_group)

            sent = bot.send_message(message.chat.id, msg, parse_mode='HTML', reply_markup=cancel_kb)
            bot.register_next_step_handler(sent, set_group)

        elif message.text == '\U0001f4ac –î–æ–≤—ñ–¥–∫–∞':

            try:
                forecast_update_date = os.path.getmtime(os.path.join(settings.BASE_DIR, 'forecast.txt'))
                mod_time = datetime.datetime.fromtimestamp(forecast_update_date).strftime('%H:%M')

            except Exception:
                mod_time = '-'

            msg = "–î–ª—è –ø–æ—à—É–∫—É —Ä–æ–∑–∫–ª–∞–¥—É –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º –¥–∞—Ç–∞–º –≤–≤–æ–¥—å:\n " \
                  "<b> 15.05</b> - –ø–æ –¥–Ω—é\n <b> 15.05-22.05</b> - –ø–æ –∫—ñ–ª—å–∫–æ–º –¥–Ω—è–º\n" \
                  "__________________________\n" \
                  "–Ø–∫—â–æ —Ç–∏ –º–∞—î—à –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —â–æ–¥–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏ " \
                  "–ø–∏—à–∏ —Å—é–¥–∏:\n <b>–¢–µ–ª–µ–≥—Ä–∞–º:</b> @Koocherov \n <b>VK:</b> vk.com/koocherov\n" \
                  "__________________________\n<b>–í–µ—Ä—Å—ñ—è:</b> {}\n<b>–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏:</b> {}"

            bot.send_message(message.chat.id, msg.format(settings.VERSION, mod_time), reply_markup=keyboard, parse_mode='HTML')

        elif message.text == '\U0001F465 –ü–æ –≥—Ä—É–ø—ñ':
            sent = bot.send_message(message.chat.id,
                                    '–î–ª—è —Ç–æ–≥–æ —â–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Ä–æ–∑–∫–ª–∞–¥ –±—É–¥—å —è–∫–æ—ó –≥—Ä—É–ø–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å –≤–≤–µ–¥–∏ —ó—ó –Ω–∞–∑–≤—É',
                                    reply_markup=keyboard)
            bot.register_next_step_handler(sent, show_other_group)

        elif message.text == '\U0001F4C5 –ü–æ –¥–∞—Ç—ñ':

            msg = '–©–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –¥–µ–Ω—å, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ –æ–¥–Ω–æ–º—É —ñ–∑ —Ç–∞–∫–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤:' \
                  '\n<b>05.03</b>\n<b>27.03</b>\n<b>5.3</b>' \
                  '\n–î–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ –∫—ñ–ª—å–∫–æ–º –¥–Ω—è–º (—Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –Ω–µ –±—ñ–ª—å—à–µ 8 –¥–Ω—ñ–≤ –ø—ñ–¥—Ä—è–¥):\n<b>20.03-22.03</b>\n' \
                  '\n<i>–í–≤–æ–¥–∏—Ç—å—Å—è –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤ (–¥–µ–Ω—å.–º—ñ—Å—è—Ü—å) </i><b>—Ä—ñ–∫ –≤–≤–æ–¥–∏—Ç–∏ –Ω–µ —Ç—Ä–µ–±–∞</b>. ' \
                  '<i>–Ø–∫—â–æ —Ä–æ–∑–∫–ª–∞–¥ –ø–æ –∫—ñ–ª—å–∫–æ–º –¥–Ω—è–º –Ω–µ –ø—Ä–∞—Ü—é—î - –≤–≤–µ–¥—ñ—Ç—å –º–µ–Ω—à—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤.</i>'

            bot.send_message(message.chat.id, msg, reply_markup=keyboard, parse_mode='HTML')

        elif message.text == '\U0001F308 –ü–æ–≥–æ–¥–∞':

            try:
                with open(os.path.join(settings.BASE_DIR, 'forecast.txt'), 'r') as forecast_file:
                    forecast = forecast_file.read()

                bot.send_message(message.chat.id, forecast, reply_markup=keyboard, parse_mode='HTML')
            except Exception:

                bot.send_message(message.chat.id, '–ü–æ–≥–æ–¥—É –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.', reply_markup=keyboard, parse_mode='HTML')

        elif message.text == '\U0001F464 –ü–æ –≤–∏–∫–ª–∞–¥–∞—á—É':

            sent = bot.send_message(message.chat.id,
                                    '–î–ª—è —Ç–æ–≥–æ —â–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Ä–æ–∑–∫–ª–∞–¥ –≤–∏–∫–ª–∞–¥–∞—á–∞ –Ω–∞ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å - '
                                    '–≤–≤–µ–¥–∏ –π–æ–≥–æ –ø—Ä—ñ–∑–≤–∏—â–µ.',
                                    reply_markup=keyboard)
            bot.register_next_step_handler(sent, select_teachers)

        else:
            bot.send_message(message.chat.id, '\U0001F440')

    else:
        bot.send_message(message.chat.id, '–©–æ–± –≤–∫–∞–∑–∞—Ç–∏ –≥—Ä—É–ø—É –∂–º–∏ -> /start')


def show_other_group(message):

    group = message.text

    if ' ' in group:
        bot.send_message(message.chat.id, '–í –Ω–∞–∑–≤—ñ –≥—Ä—É–ø–∏ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—Ä–æ–±—ñ–ª—ñ–≤.',
                         reply_markup=keyboard)
        return

    in_week = datetime.date.today() + datetime.timedelta(days=7)
    in_week_day = in_week.strftime('%d.%m.%Y')

    today = datetime.date.today().strftime('%d.%m.%Y')

    rozklad_data = get_rozklad(group=group, sdate=today, edate=in_week_day)

    rozklad_for_week = '<b>–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å –≥—Ä—É–ø–∏ {}:</b>\n\n'.format(message.text)

    if rozklad_data:
        for rozklad_day in rozklad_data:
            rozklad_for_week += show_day_rozklad(rozklad_day)
    else:
        rozklad_for_week = '–ù–∞ —Ç–∏–∂–¥–µ–Ω—å –ø–∞—Ä –¥–ª—è –≥—Ä—É–ø–∏ {} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.'.format(group)

    if len(rozklad_for_week) < 4100:
        bot.send_message(message.chat.id, rozklad_for_week, parse_mode='HTML', reply_markup=keyboard)

    else:
        rozklad_for_week = ''

        for rozklad_day in rozklad_data[1:]:
            rozklad_for_week += show_day_rozklad(rozklad_day)

        bot.send_message(message.chat.id, rozklad_for_week, parse_mode='HTML', reply_markup=keyboard)


#  ____________________________________________________SERVER__________________________________________________________


if __name__ == '__main__':

    create_database()

    try:
        log(m='–ó–∞–ø—É—Å–∫..')
        bot.polling(none_stop=True, interval=settings.POLLING_INTERVAL)

    except Exception as ex:

        log(m='–ü–æ–º–∏–ª–∫–∞ - {}\n'.format(str(ex)))
        bot.stop_polling()

        if settings.SEND_ERRORS_TO_ADMIN:
            for admin in settings.ADMINS_ID:
                data = {
                    'chat_id': admin,
                    'text': 'Something go wrong.\nError: {}'.format(str(ex))
                }

                requests.get('https://api.telegram.org/bot{}/sendMessage'.format(settings.BOT_TOKEN), params=data)
