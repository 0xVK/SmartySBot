# -*- coding: utf-8 -*-
from bs4 import BeautifulSoup
import requests
import telebot
import datetime
import os
import settings
import core
import re
import json
import copy
import random
from WeatherManager import WeatherManager
from settings import KEYBOARD
from flask import Flask, request, render_template, jsonify

app = Flask(__name__, template_folder='site', static_folder='site/static', static_url_path='/fl/static')
bot = telebot.TeleBot(settings.BOT_TOKEN, threaded=True)

keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
keyboard.row(KEYBOARD['TODAY'], KEYBOARD['TOMORROW'], KEYBOARD['FOR_A_WEEK'])
keyboard.row(KEYBOARD['FOR_A_TEACHER'], KEYBOARD['FOR_A_GROUP'])
keyboard.row(KEYBOARD['TIMETABLE'], KEYBOARD['WEATHER'], KEYBOARD['HELP'])

emoji_numbers = ['0‚É£', '1‚É£', '2‚É£', '3‚É£', '4‚É£', '5‚É£', '6‚É£', '7‚É£', '8‚É£', '9‚É£']


def get_timetable(faculty='', teacher='', group='', sdate='', edate='', user_id=None):

    http_headers = {
            'User-Agent': settings.HTTP_USER_AGENT,
            'Accept': 'text/html',
    }

    try:
        post_data = {
            'faculty': faculty,
            'teacher': teacher.encode('windows-1251'),
            'group': group.encode('windows-1251'),
            'sdate': sdate,
            'edate': edate,
            'n': 700,
        }
    except Exception as ex:
        core.log(m='Error encoding request parameters: {}'.format(str(ex)))
        bot.send_message(user_id, '–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É, –≤–∫–∞–∂—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏.', reply_markup=keyboard)
        return False

    if settings.USE_CACHE:
        request_key = 'G:{}|T:{}|SD:{}|ED:{}'.format(group.lower(), teacher, sdate, edate)
        cached_timetable = core.Cache.get_from_cache(request_key)

        if cached_timetable:
            return json.loads(cached_timetable[0][1])

    try:
        page = requests.post(settings.TIMETABLE_URL, post_data, headers=http_headers, timeout=6)
    except Exception as ex:
        core.log(m='Error with Dekanat site connection: {}'.format(str(ex)))
        bot.send_message(user_id, '–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è —ñ–∑ —Å–∞–π—Ç–æ–º –î–µ–∫–∞–Ω–∞—Ç—É. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.', reply_markup=keyboard)
        return False

    parsed_page = BeautifulSoup(page.content, 'html5lib')
    all_days_list = parsed_page.find_all('div', class_='col-md-6')[1:]
    all_days_lessons = []

    for one_day_table in all_days_list:
        all_days_lessons.append({
            'day': one_day_table.find('h4').find('small').text,
            'date': one_day_table.find('h4').text[:5],
            'lessons': [' '.join(lesson.text.split()) for lesson in one_day_table.find_all('td')[2::3]]
        })

    if all_days_lessons and settings.USE_CACHE:  # if timetable exists, put it to cache
        cached_all_days_lessons = copy.deepcopy(all_days_lessons)
        cached_all_days_lessons[0]['day'] += '*'
        _json = json.dumps(cached_all_days_lessons, sort_keys=True, ensure_ascii=False, separators=(',', ':'), indent=2)
        core.Cache.put_in_cache(request_key, _json)

    return all_days_lessons


def render_day_timetable(day_data):

    day_timetable = '.....::::: <b>\U0001F4CB {}</b> - <i>{}</i> :::::.....\n\n'.format(day_data['day'], day_data['date'])

    lessons = day_data['lessons']

    start_index = 0
    end_index = len(lessons) - 1

    for i in range(8):
        if lessons[i]:
            start_index = i
            break

    for i in range(end_index, -1, -1):
        if lessons[i]:
            end_index = i
            break

    timetable = ['8:30 - 9:50', '10:00 - 11:20', '11:40 - 13:00', '13:10 - 14:30',
                 '14:40 - 16:00', '16:20 - 17:40', '17:50 - 19:10', '19:20 - 20:40']

    for i in range(start_index, end_index + 1):
        if lessons[i]:
            day_timetable += '{} <i>{}</i> \n{}\n\n'.format(emoji_numbers[i+1], timetable[i], lessons[i])
        else:
            day_timetable += '{} <i>{}</i>\n–í—ñ–∫–Ω–æ \U0001F483\U0001F57A\n\n'.format(emoji_numbers[i+1], timetable[i])

    return day_timetable


@bot.message_handler(commands=['ci'])
def cache_info(message):

    user = core.User(message.chat)

    if str(user.get_id()) not in settings.ADMINS_ID:
        return

    cache_items_count = len(core.Cache.get_keys() or '')

    bot.send_message(user.get_id(), 'In cache: {} units'.format(cache_items_count))


@bot.message_handler(commands=['cc'])
def clear_cache(message):

    user = core.User(message.chat)

    if str(user.get_id()) not in settings.ADMINS_ID:
        return

    core.Cache.clear_cache()

    bot.send_message(user.get_id(), 'The cache has been successfully cleaned.')


@bot.message_handler(commands=['log'])
def get_logs(message):

    user = core.User(message.chat)

    if str(user.get_id()) not in settings.ADMINS_ID:
        return

    with open(os.path.join(settings.BASE_DIR, 'bot_log.txt'), 'r', encoding="utf-8") as log_file:
        log_lines = log_file.readlines()

    logs = ''

    for line in log_lines[-65:]:
        logs += line

    bot.send_message(user.get_id(), logs, reply_markup=keyboard)


@bot.message_handler(commands=['start'])
def start_handler(message):
    sent = bot.send_message(message.chat.id, '–ô–æ—É, {} üòä. –Ø –º–æ–∂—É –ø–æ–∫–∞–∑–∞—Ç–∏ —Ç–≤—ñ–π —Ä–æ–∑–∫–ª–∞–¥ –ø—Ä—è–º–æ —Ç—É—Ç. –î–ª—è –ø–æ—á–∞—Ç–∫—É '
                                             '—Å–∫–∞–∂–∏ –º–µ–Ω—ñ —Å–≤–æ—é –≥—Ä—É–ø—É (–ù–∞–ø—Ä. 44_—ñ_–¥)'.format(message.chat.first_name))
    bot.register_next_step_handler(sent, set_group)


@bot.callback_query_handler(func=lambda call_back: call_back.data in ('–ü–æ—Ç–æ—á–Ω–∏–π', '–ù–∞—Å—Ç—É–ø–Ω–∏–π'))
def week_schedule_handler(call_back):

    user = core.User(call_back.message.chat)
    user_group = user.get_group()
    request = call_back.data

    today = datetime.date.today()
    current_week_day_number = today.isoweekday()
    diff_between_friday_and_today = 5 - current_week_day_number
    last_week_day = today + datetime.timedelta(days=diff_between_friday_and_today)

    next_week_first_day = today + datetime.timedelta(days=diff_between_friday_and_today + 3)
    next_week_last_day = today + datetime.timedelta(days=diff_between_friday_and_today + 7)

    if request == '–ü–æ—Ç–æ—á–Ω–∏–π':
        timetable_data = get_timetable(group=user_group, sdate=today.strftime('%d.%m.%Y'),
                                       edate=last_week_day.strftime('%d.%m.%Y'), user_id=user.get_id())
    if request == '–ù–∞—Å—Ç—É–ø–Ω–∏–π':
        timetable_data = get_timetable(group=user_group, sdate=next_week_first_day.strftime('%d.%m.%Y'),
                                       edate=next_week_last_day.strftime('%d.%m.%Y'), user_id=user.get_id())

    timetable_for_week = ''

    if timetable_data:
        for timetable_day in timetable_data:
            timetable_for_week += render_day_timetable(timetable_day)

    elif isinstance(timetable_data, list) and not len(timetable_data):
        timetable_for_week = "–ù–∞ —Ç–∏–∂–¥–µ–Ω—å –ø–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        bot_send_message_and_post_check_group(user.get_id(), timetable_for_week, user_group)
        return

    else:
        return

    bot.delete_message(chat_id=user.get_id(), message_id=call_back.message.message_id)
    bot.send_message(text=timetable_for_week[:4090], chat_id=user.get_id(),
                     parse_mode="HTML", reply_markup=keyboard)


def bot_send_message_and_post_check_group(chat_id='', text='', user_group='', parse_mode='HTML'):

    if not core.is_group_valid(user_group):
        possible_groups = core.get_possible_groups(user_group)
        text += '\n\n–¢–≤–æ—î—ó –≥—Ä—É–ø–∏ <b>{}</b> –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ —Ä–æ–∑–∫–ª–∞–¥—É, ' \
                '—Ç–æ–º—É –ø–µ—Ä–µ–≤—ñ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–æ–¥—É.'.format(user_group)

        if possible_groups:
            text += '\n<b>–ú–æ–∂–ª–∏–≤—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏:</b>\n'
            for possible_group in possible_groups:
                text += '{}\n'.format(possible_group.get('group'))

        text += '\n–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –≥—Ä—É–ø—É –∂–º–∏ {} > {}'.format(KEYBOARD['HELP'], KEYBOARD['CHANGE_GROUP'])

    bot.send_message(chat_id=chat_id, text=text, parse_mode=parse_mode, reply_markup=keyboard)


def set_group(message):

    user = core.User(message.chat)
    group = message.text

    if group == '–í—ñ–¥–º—ñ–Ω–∞':
        current_user_group = user.get_group()
        bot.send_message(message.chat.id, '–î–æ–±—Ä–µ, –∑–∞–ª–∏—à–∏–º–æ –≥—Ä—É–ø—É {}.'.format(current_user_group), reply_markup=keyboard)
        return

    if not core.is_group_valid(group):

        possible_groups = core.get_possible_groups(group)
        msg = '–ì—Ä—É–ø—É <b>{}</b> —è –∑–±–µ—Ä—ñ–≥, –∞–ª–µ —ó—ó –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ —Ä–æ–∑–∫–ª–∞–¥—É. ' \
              '–¢–æ–º—É —è–∫—â–æ —Ä–æ–∑–∫–ª–∞–¥ –Ω–µ –±—É–¥–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏—Å—å - –ø–µ—Ä–µ–≤—ñ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–æ–¥—É.\n\n' \
              '<i>–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –≥—Ä—É–ø—É –∂–º–∏: </i>{} > {}\n'.format(group, KEYBOARD['HELP'], KEYBOARD['CHANGE_GROUP'])

        if possible_groups:
            msg += '<b>–ú–æ–∂–ª–∏–≤—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏:</b>\n'
            for possible_group in possible_groups:
                msg += '{}\n'.format(possible_group.get('group'))

    else:
        msg = '–î–æ–±—Ä–æ üëç, –±—É–¥—É –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –¥–ª—è –≥—Ä—É–ø–∏ {}.'.format(group)

    user.update_group(group) if user.get_group() else user.registration(group)

    bot.send_message(message.chat.id, msg, reply_markup=keyboard, parse_mode='HTML')


def show_teachers(chat_id, name):

    in_week = datetime.date.today() + datetime.timedelta(days=7)

    in_week_day = in_week.strftime('%d.%m.%Y')
    today = datetime.date.today().strftime('%d.%m.%Y')

    rozklad_data = get_timetable(teacher=name, sdate=today, edate=in_week_day, user_id=chat_id)

    if rozklad_data:
        rozklad_for_week = '–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å —É <b>{}</b>:\n\n'.format(name)
        for rozklad_day in rozklad_data:
            rozklad_for_week += render_day_timetable(rozklad_day)
    else:
        rozklad_for_week = '–ù–∞ —Ç–∏–∂–¥–µ–Ω—å –ø–∞—Ä —É –≤–∏–∫–ª–∞–¥–∞—á–∞ <b>{}</b> –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.'.format(name)

    bot.send_message(chat_id, rozklad_for_week, reply_markup=keyboard, parse_mode='HTML')


def select_teacher_from_request(message):  # —Ñ-—è –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∫–æ–ª–∏ —î 2 —ñ –±—ñ–ª—å—à–µ –≤–∏–∫–ª–∞–¥–∞—á—ñ –∑ —Ç–∞–∫–∏–º –ø—Ä—ñ–∑–≤–∏—â–µ–º

    if message.text == '–ù–∞–∑–∞–¥':
        bot.send_message(message.chat.id, '–û–∫–µ–π)', reply_markup=keyboard)
        return

    show_teachers(message.chat.id, message.text)


def select_teachers(message):

    core.log(message.chat, '> (–ø–æ –≤–∏–∫–ª–∞–¥–∞—á—É) {}'.format(message.text))
    tchrs = []

    try:
        with open(os.path.join(settings.BASE_DIR, 'teachers.txt'), 'r', encoding="utf-8") as file:
            all_teachers = json.loads(file.read())
    except Exception as ex:
        bot.send_message(message.chat.id, '–î–∞–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ –ø—Ä–∞—Ü—é—î.', reply_markup=keyboard)
        core.log(m='Error loading teachers file: {}'.format(str(ex)))
        return

    for teacher in all_teachers:
        if teacher.split()[0].upper() == message.text.upper():
            tchrs.append(teacher)

    if not tchrs:
        bot.send_message(message.chat.id, '–ù–µ –º–æ–∂—É –∑–Ω–∞–π—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞ –∑ —Ç–∞–∫–∏–º –ø—Ä—ñ–∑–≤–∏—â–µ–º.', reply_markup=keyboard)
        return

    if len(tchrs) == 1:
        show_teachers(message.chat.id, tchrs[0])
        return

    if len(tchrs) > 1:

        teachers_keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for teacher in tchrs:
            teachers_keyboard.row(teacher)

        teachers_keyboard.row('–ù–∞–∑–∞–¥')
        sent = bot.send_message(message.chat.id, '–í–∏–±–µ—Ä–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞:', reply_markup=teachers_keyboard)
        bot.register_next_step_handler(sent, select_teacher_from_request)
        return


def show_other_group(message):

    group = message.text
    core.log(message.chat, '> (–ø–æ –≥—Ä—É–ø—ñ) {}'.format(group))
    bot.send_chat_action(message.chat.id, "typing")

    if group == KEYBOARD['MAIN_MENU']:
        bot.send_message(message.chat.id, '–û–∫–µ–π', reply_markup=keyboard, parse_mode='HTML')
        return

    if not core.is_group_valid(group):

        possible_groups = core.get_possible_groups(group)
        msg = '–ì—Ä—É–ø–∏ <b>{}</b> –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ —Ä–æ–∑–∫–ª–∞–¥—É.\n'.format(group)

        if possible_groups:

            msg += '<b>–ú–æ–∂–ª–∏–≤—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏:</b>\n'
            groups_kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

            groups_kb.row(KEYBOARD['MAIN_MENU'])

            for group in possible_groups:
                msg += '{}\n'.format(group.get('group'))
                groups_kb.row(group.get('group'))

            sent = bot.send_message(message.chat.id, msg, parse_mode='HTML', reply_markup=groups_kb)
            bot.register_next_step_handler(sent, show_other_group)
            return

        bot.send_message(message.chat.id, msg, reply_markup=keyboard, parse_mode='HTML')
        return

    in_week = datetime.date.today() + datetime.timedelta(days=7)
    in_week_day = in_week.strftime('%d.%m.%Y')
    today = datetime.date.today().strftime('%d.%m.%Y')

    timetable_data = get_timetable(group=group, sdate=today, edate=in_week_day, user_id=message.chat.id)
    timetable_for_week = '<b>–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å –¥–ª—è –≥—Ä—É–ø–∏ {}:</b>\n\n'.format(message.text)

    if timetable_data:
        for timetable_day in timetable_data:
            timetable_for_week += render_day_timetable(timetable_day)
    elif isinstance(timetable_data, list) and not len(timetable_data):
        timetable_for_week = '–ù–∞ —Ç–∏–∂–¥–µ–Ω—å –ø–∞—Ä –¥–ª—è –≥—Ä—É–ø–∏ {} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.'.format(group)
    else:
        return

    bot.send_message(message.chat.id, timetable_for_week[:4090], parse_mode='HTML', reply_markup=keyboard)


@app.route('/fl/metrics')
def admin_metrics():

    all_users_count = core.MetricsManager.get_all_users_count()
    all_groups_count = core.MetricsManager.get_all_groups_count()
    users_registered_week = core.MetricsManager.get_number_of_users_registered_during_the_week()
    active_today_users_count = core.MetricsManager.get_active_today_users_count()
    active_yesterday_users_count = core.MetricsManager.get_active_yesterday_users_count()
    active_week_users_count = core.MetricsManager.get_active_week_users_count()

    try:
        forecast_update_date = os.path.getmtime(os.path.join(settings.BASE_DIR, 'groups.txt'))
        groups_update_time = datetime.datetime.fromtimestamp(forecast_update_date).strftime('%d.%m.%Y %H:%M')
    except Exception:
        groups_update_time = '-'

    try:
        forecast_update_date = os.path.getmtime(os.path.join(settings.BASE_DIR, 'teachers.txt'))
        teachers_update_time = datetime.datetime.fromtimestamp(forecast_update_date).strftime('%d.%m.%Y %H:%M')
    except Exception:
        teachers_update_time = '-'

    metrics_values = {
        'all_users_count': all_users_count,
        'all_groups_count': all_groups_count,
        'users_registered_week': users_registered_week,
        'active_today_users_count': active_today_users_count,
        'active_yesterday_users_count': active_yesterday_users_count,
        'active_week_users_count': active_week_users_count,

        'groups_update_time': groups_update_time,
        'teachers_update_time': teachers_update_time,
    }

    return render_template('metrics.html', data=metrics_values)


@app.route('/fl/del_user', methods=['POST'])
def admin_del_user():

    data = {}

    if request.method == 'POST' and request.form.get('PWD') == request.form.get('ID') + ' 3':

        telegram_id = request.form.get('ID')

        u = core.User.get_username(telegram_id)
        core.User.delete_user(telegram_id)

        if u:
            data['message'] = '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á <b>{} {}</b> –±—É–≤ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∏–π. <br> ' \
                              '<b>–≥—Ä—É–ø–∞:</b> {}, <b>—Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è:</b> {}, ' \
                              '<b>–æ—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b> {}'.format(u[2], u[3] or '', u[4], u[5], u[6])
        else:
            data['message'] = '–¢–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.'
    else:

        data['message'] = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å'

    users = core.MetricsManager.get_users()
    data['users'] = users

    return render_template('users.html', data=data)


@app.route('/fl/users')
def admin_users():

    data = {
        'users': core.MetricsManager.get_users()
    }

    return render_template('users.html', data=data)


@app.route('/fl/send_message', methods=['POST'])
def admin_send_message():

    data = {}

    if request.method == 'POST' and request.form.get('pass') == request.form.get('id') + ' 2':

        telegram_id = request.form.get('id')

        data = {
            'chat_id': telegram_id,
            'parse_mode': 'HTML',
            'text': '\U0001f916 <b>–ë–æ—Ç</b>:\n\n' + str(request.form.get('text')).strip()
        }

        r = requests.get('https://api.telegram.org/bot{}/sendMessage'.format(settings.BOT_TOKEN), params=data).json()

        if r.get('ok'):
            data['message'] = '–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ'
        else:
            data['message'] = '–ü–æ–º–∏–ª–∫–∞ {}: {}'.format(r.get('error_code'), r.get('description'))

    users = core.MetricsManager.get_users()
    data['users'] = users

    return render_template('users.html', data=data)


@app.route('/fl/statistics_by_types_during_the_week')
def statistics_by_types_during_the_week():

    stats = core.MetricsManager.get_statistics_by_types_during_the_week()

    return jsonify(data=stats)


@app.route('/fl/last_days_statistics')
def last_days_statistics():

    days_statistics = core.MetricsManager.get_last_days_statistics()

    stats = {'labels': [], 'data': []}

    def sort_by_date(input_str):
        return datetime.datetime.strptime(input_str + '.' + str(datetime.date.today().year), '%d.%m.%Y')

    # Sorting by dates
    for day_stat in sorted(days_statistics, key=sort_by_date):

        stats['labels'].append(day_stat)
        stats['data'].append(days_statistics[day_stat])

    return jsonify(data=stats)


@app.route('/fl/update_groups')
def admin_update_groups():

    updated = core.update_all_groups()

    if updated:
        msg = '–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø –æ–Ω–æ–≤–ª–µ–Ω–æ. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {} –≥—Ä—É–ø.<br>'.format(len(updated))
        msg += str(updated)
        return msg
    return '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ'


@app.route('/fl/update_teachers')
def admin_update_teachers():

    updated = core.update_all_teachers()

    if updated:
        msg = '–°–ø–∏—Å–æ–∫ –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {} —ñ–º–µ–Ω.<br>'.format(len(updated))
        msg += str(updated)
        return msg
    return '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ'


@app.route('/fl/user/<user_id>')
def admin_user_statistics(user_id):

    data = {
        'user': core.User.get_userinfo_by_id(user_id),
        'actions': core.MetricsManager.get_stats_by_user_id(user_id),
    }

    return render_template('user_stat.html', data=data)


@app.route('/fl/run')
def index():
    core.User.create_user_table_if_not_exists()
    core.MetricsManager.create_metrics_table_if_not_exists()
    bot.delete_webhook()
    bot.set_webhook(settings.WEBHOOK_URL + settings.WEBHOOK_PATH, max_connections=1)
    bot.send_message('204560928', 'Running...')
    core.log(m='Webhook is setting: {} by run url'.format(bot.get_webhook_info().url))
    return 'ok'


@app.route(settings.WEBHOOK_PATH, methods=['POST', 'GET'])
def webhook():
    json_string = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])

    return "!", 200


@bot.message_handler(content_types=["text"])
def main_menu(message):

    bot.send_chat_action(message.chat.id, "typing")

    user = core.User(message.chat)
    user_group = user.get_group()
    request = message.text

    if user_group:

        def is_date_request_or_other():

            if re.search(r'^(\d{1,2})\.(\d{1,2})$', request) or \
               re.search(r'^(\d{1,2})\.(\d{1,2})-(\d{1,2})\.(\d{1,2})$', request) or \
               re.search(r'^(\d{1,2})\.(\d{1,2})\.(\d{2,4})$', request) or \
               re.search(r'^(\d{1,2})\.(\d{1,2})\.(\d{2,4})-(\d{1,2})\.(\d{1,2})\.(\d{2,4})$', request):

                return 'FOR_A_DATE'

            return 'OTHER'

        # Reversed keys and values in dictionary
        request_code = {v: k for k, v in KEYBOARD.items()}.get(request, is_date_request_or_other())
        core.MetricsManager.track(user.get_id(), request_code, user_group)

        core.log(message.chat, '> {}'.format(message.text))

        if request == KEYBOARD['TODAY'] or request == '\U0001F4D7 –°—å–æ–≥–æ–¥–Ω—ñ':  # Today

            timetable_data = get_timetable(group=user_group, user_id=user.get_id())

            if timetable_data:
                timetable_for_today = render_day_timetable(timetable_data[0])
            elif isinstance(timetable_data, list) and not len(timetable_data):

                timetable_for_today = "–ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –ø–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
                bot_send_message_and_post_check_group(user.get_id(), timetable_for_today, user_group)
                return

            else:
                return

            bot.send_message(user.get_id(), timetable_for_today, parse_mode='HTML', reply_markup=keyboard)

        elif request == KEYBOARD['TOMORROW'] or request == '\U0001F4D8 –ó–∞–≤—Ç—Ä–∞':  # Tomorrow

            tomorrow = datetime.date.today() + datetime.timedelta(days=1)
            tom_day = tomorrow.strftime('%d.%m.%Y')

            timetable_data = get_timetable(group=user_group, sdate=tom_day, edate=tom_day, user_id=user.get_id())

            if timetable_data:
                timetable_for_tomorrow = render_day_timetable(timetable_data[0])
            elif isinstance(timetable_data, list) and not len(timetable_data):
                timetable_for_tomorrow = "–ù–∞ –∑–∞–≤—Ç—Ä–∞ –ø–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
                bot_send_message_and_post_check_group(user.get_id(), timetable_for_tomorrow, user_group)
                return

            else:
                return

            bot.send_message(user.get_id(), timetable_for_tomorrow, parse_mode='HTML', reply_markup=keyboard)

        elif request == KEYBOARD['FOR_A_WEEK'] or request == '\U0001F4DA –ù–∞ —Ç–∏–∂–¥–µ–Ω—å':  # For a week

            if datetime.date.today().isoweekday() in (4, 5, 6, 7):  # –ß—Ç, –ø—Ç, —Å–±, –Ω–¥

                timetable_for_week = ''
                today = datetime.date.today()
                current_week_day_number = today.isoweekday()
                diff_between_friday_and_today = 5 - current_week_day_number
                next_week_first_day = today + datetime.timedelta(days=diff_between_friday_and_today + 3)
                next_week_last_day = today + datetime.timedelta(days=diff_between_friday_and_today + 7)

                timetable_data = get_timetable(group=user_group, sdate=next_week_first_day.strftime('%d.%m.%Y'),
                                               edate=next_week_last_day.strftime('%d.%m.%Y'), user_id=user.get_id())

                if timetable_data:
                    for timetable_day in timetable_data:
                        timetable_for_week += render_day_timetable(timetable_day)

                elif isinstance(timetable_data, list) and not len(timetable_data):
                    timetable_for_week = "–ù–∞ —Ç–∏–∂–¥–µ–Ω—å, –∑ {} –ø–æ {} –ø–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.".format(
                        next_week_first_day.strftime('%d.%m'), next_week_last_day.strftime('%d.%m'))

                    bot_send_message_and_post_check_group(user.get_id(), timetable_for_week, user_group)
                    return

                bot.send_message(text=timetable_for_week[:4090], chat_id=user.get_id(),
                                 reply_markup=keyboard, parse_mode="HTML")

                return

            week_type_keyboard = telebot.types.InlineKeyboardMarkup()
            week_type_keyboard.row(
                *[telebot.types.InlineKeyboardButton(text=name, callback_data=name) for
                  name in ["–ü–æ—Ç–æ—á–Ω–∏–π", "–ù–∞—Å—Ç—É–ø–Ω–∏–π"]]
            )

            bot.send_message(user.get_id(), '–ù–∞ —è–∫–∏–π —Ç–∏–∂–¥–µ–Ω—å?', reply_markup=week_type_keyboard)

        elif request == KEYBOARD['TIMETABLE']:

            t = ''
            t += '{} - 8:30 - 9:50\n'.format(emoji_numbers[1])
            t += '{} - 10:00 - 11:20\n'.format(emoji_numbers[2])
            t += '{} - 11:40 - 13:00\n'.format(emoji_numbers[3])
            t += '{} - 13:10 - 14:30\n'.format(emoji_numbers[4])
            t += '{} - 14:40 - 16:00\n'.format(emoji_numbers[5])
            t += '{} - 16:20 - 17:40\n'.format(emoji_numbers[6])
            t += '{} - 17:50 - 19:10\n'.format(emoji_numbers[7])
            t += '{} - 19:20 - 20:40\n'.format(emoji_numbers[8])

            bot.send_message(user.get_id(), t, reply_markup=keyboard)

        elif request == KEYBOARD['CHANGE_GROUP']:

            user_group = user.get_group()

            cancel_kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            cancel_kb.row('–í—ñ–¥–º—ñ–Ω–∞')

            msg = '–¢–≤–æ—è –≥—Ä—É–ø–∞: {}\n–©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –≤–≤–µ–¥–∏ –Ω–æ–≤—É –≥—Ä—É–ø—É'.format(user_group)

            sent = bot.send_message(message.chat.id, msg, parse_mode='HTML', reply_markup=cancel_kb)
            bot.register_next_step_handler(sent, set_group)

        elif request == KEYBOARD['HELP']:

            try:
                forecast_update_date = os.path.getmtime(os.path.join(settings.BASE_DIR, 'forecast.txt'))
                mod_time = datetime.datetime.fromtimestamp(forecast_update_date).strftime('%H:%M')

            except Exception:
                mod_time = '-'

            msg = "–î–ª—è –ø–æ—à—É–∫—É –ø–æ –¥–∞—Ç–∞–º : <b>15.05</b>, <b>15.05-22.05</b>, <b>1.1.18-10.1.18</b>\n\n" \
                  "<b>–ì—Ä—É–ø–∞:</b> <code>{}</code>\n\n" \
                  "<b>–í–µ—Ä—Å—ñ—è:</b> {}\n" \
                  "<b>–ö–∞–Ω–∞–ª:</b> @zdu_news\n" \
                  "<b>–†–æ–∑—Ä–æ–±–Ω–∏–∫:</b> @Koocherov\n"

            kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            kb.row(KEYBOARD['MAIN_MENU'])
            kb.row(KEYBOARD['CHANGE_GROUP'])

            bot.send_message(message.chat.id, msg.format(user.get_group(), settings.VERSION, mod_time),
                             reply_markup=kb, parse_mode='HTML')

        elif request == KEYBOARD['FOR_A_GROUP']:
            sent = bot.send_message(message.chat.id,
                                    '–î–ª—è —Ç–æ–≥–æ —â–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Ä–æ–∑–∫–ª–∞–¥ –±—É–¥—å —è–∫–æ—ó –≥—Ä—É–ø–∏ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å –≤–≤–µ–¥–∏ —ó—ó –Ω–∞–∑–≤—É')
            bot.register_next_step_handler(sent, show_other_group)

        elif request == KEYBOARD['WEATHER']:

            try:

                weather_manager = WeatherManager()
                weather_manager.process_weather()

                with open(os.path.join(settings.BASE_DIR, 'forecast.txt'), 'r', encoding="utf-8") as forecast_file:
                    forecast = forecast_file.read()

                bot.send_message(message.chat.id, forecast, reply_markup=keyboard, parse_mode='HTML')

            except Exception:
                bot.send_message(message.chat.id, '–ü–æ–≥–æ–¥—É –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.', reply_markup=keyboard, parse_mode='HTML')

        elif request == KEYBOARD['FOR_A_TEACHER']:

            sent = bot.send_message(message.chat.id,
                                    '–î–ª—è —Ç–æ–≥–æ —â–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å —Ä–æ–∑–∫–ª–∞–¥ –≤–∏–∫–ª–∞–¥–∞—á–∞ –Ω–∞ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å - '
                                    '–≤–≤–µ–¥–∏ –π–æ–≥–æ –ø—Ä—ñ–∑–≤–∏—â–µ.')
            bot.register_next_step_handler(sent, select_teachers)

        elif re.search(r'^(\d{1,2})\.(\d{1,2})$', request):

            date = request + '.' + str(datetime.date.today().year)
            timetable_data = get_timetable(group=user_group, edate=date, sdate=date, user_id=user.get_id())

            if timetable_data:
                timetable_for_date = render_day_timetable(timetable_data[0])
            elif isinstance(timetable_data, list) and not len(timetable_data):
                msg = '–©–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –¥–µ–Ω—å, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:' \
                      '\n<b>05.03</b> –∞–±–æ <b>5.3</b>\n–ü–æ –∫—ñ–ª—å–∫–æ–º –¥–Ω—è–º: \n<b>5.03-15.03</b>\n' \
                      '\n–Ø–∫—â–æ —Ä–æ–∑–∫–ª–∞–¥ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤–≤–µ–¥–∏ –º–µ–Ω—à—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ ' \
                      '\n–î–∞—Ç–∞ –≤–≤–æ–¥–∏—Ç—å—Å—è –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤ (–¥–µ–Ω—å.–º—ñ—Å—è—Ü—å)<b> —Ä—ñ–∫ –≤–≤–æ–¥–∏—Ç–∏ –Ω–µ —Ç—Ä–µ–±–∞</b> ' \

                timetable_for_date = '–ù–∞ <b>{}</b>, –¥–ª—è –≥—Ä—É–ø–∏ <b>{}</b> –ø–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n\n{}'.format(date,
                                                                                                       user_group,
                                                                                                       msg)
            else:
                return

            bot.send_message(message.chat.id, timetable_for_date, parse_mode='HTML', reply_markup=keyboard)

        elif re.search(r'^(\d{1,2})\.(\d{1,2})-(\d{1,2})\.(\d{1,2})$', request):

            s_date = message.text.split('-')[0] + '.' + str(datetime.date.today().year)
            e_date = message.text.split('-')[1] + '.' + str(datetime.date.today().year)
            timetable_for_days = ''
            timetable_data = get_timetable(group=user_group, sdate=s_date, edate=e_date, user_id=user.get_id())

            if timetable_data:
                for timetable_day in timetable_data:
                    timetable_for_days += render_day_timetable(timetable_day)

                if len(timetable_for_days) > 5000:
                    msg = "–í–≤–µ–¥–∏ –º–µ–Ω—à—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤." \
                          " –ü–µ—Ä–µ–≤–∏—â–µ–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ–ø—É—Å—Ç–∏–º–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ ({} —ñ–∑ 5000).".format(len(timetable_for_days))
                    bot.send_message(user.get_id(), msg, parse_mode='HTML', reply_markup=keyboard)
                    return

            elif isinstance(timetable_data, list) and not len(timetable_data):
                msg = '–©–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –¥–µ–Ω—å, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:' \
                      '\n<b>05.03</b> –∞–±–æ <b>5.3</b>\n–ü–æ –∫—ñ–ª—å–∫–æ–º –¥–Ω—è–º: \n<b>5.03-15.03</b>\n' \
                      '\n–Ø–∫—â–æ —Ä–æ–∑–∫–ª–∞–¥ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤–≤–µ–¥–∏ –º–µ–Ω—à—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤.' \
                      '\n–î–∞—Ç–∞ –≤–≤–æ–¥–∏—Ç—å—Å—è –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤ (–¥–µ–Ω—å.–º—ñ—Å—è—Ü—å)<b> —Ä—ñ–∫ –≤–≤–æ–¥–∏—Ç–∏ –Ω–µ —Ç—Ä–µ–±–∞</b> '
                timetable_for_days = '–ù–∞ <b>{} - {}</b>, –¥–ª—è –≥—Ä—É–ø–∏ <b>{}</b> –ø–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n\n{}'.format(s_date,
                                                                                                            e_date,
                                                                                                            user_group,
                                                                                                            msg)
            else:
                return

            bot.send_message(user.get_id(), timetable_for_days, parse_mode='HTML', reply_markup=keyboard)

        elif re.search(r'^(\d{1,2})\.(\d{1,2})\.(\d{2,4})$', request):

            date = request
            timetable_data = get_timetable(group=user_group, edate=date, sdate=date, user_id=user.get_id())

            if timetable_data:
                timetable_for_date = render_day_timetable(timetable_data[0])
            elif isinstance(timetable_data, list) and not len(timetable_data):
                msg = '–©–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –¥–µ–Ω—å, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:' \
                      '\n<b>05.03</b> –∞–±–æ <b>5.3</b>\n–ü–æ –∫—ñ–ª—å–∫–æ–º –¥–Ω—è–º: \n<b>5.03-15.03</b>\n' \
                      '\n–Ø–∫—â–æ —Ä–æ–∑–∫–ª–∞–¥ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤–≤–µ–¥–∏ –º–µ–Ω—à—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ ' \
                      '\n–î–∞—Ç–∞ –≤–≤–æ–¥–∏—Ç—å—Å—è –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤ (–¥–µ–Ω—å.–º—ñ—Å—è—Ü—å)<b> —Ä—ñ–∫ –≤–≤–æ–¥–∏—Ç–∏ –Ω–µ —Ç—Ä–µ–±–∞</b> ' \

                timetable_for_date = '–ù–∞ <b>{}</b>, –¥–ª—è –≥—Ä—É–ø–∏ <b>{}</b> –ø–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n\n{}'.format(date,
                                                                                                       user_group,
                                                                                                       msg)
            else:
                return

            bot.send_message(message.chat.id, timetable_for_date, parse_mode='HTML', reply_markup=keyboard)

        elif re.search(r'^(\d{1,2})\.(\d{1,2})\.(\d{2,4})-(\d{1,2})\.(\d{1,2})\.(\d{2,4})$', request):

            s_date = request.split('-')[0]
            e_date = request.split('-')[1]
            timetable_for_days = ''
            timetable_data = get_timetable(group=user_group, sdate=s_date, edate=e_date, user_id=user.get_id())

            if timetable_data:
                for timetable_day in timetable_data:
                    timetable_for_days += render_day_timetable(timetable_day)

                if len(timetable_for_days) > 5000:
                    msg = "–í–≤–µ–¥–∏ –º–µ–Ω—à—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤." \
                          " –ü–µ—Ä–µ–≤–∏—â–µ–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ–ø—É—Å—Ç–∏–º–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ ({} —ñ–∑ 5000).".format(len(timetable_for_days))
                    bot.send_message(user.get_id(), msg, parse_mode='HTML', reply_markup=keyboard)
                    return

            elif isinstance(timetable_data, list) and not len(timetable_data):
                msg = '–©–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –¥–µ–Ω—å, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ç–∞–∫–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ:' \
                      '\n<b>05.03</b> –∞–±–æ <b>5.3</b>\n–ü–æ –∫—ñ–ª—å–∫–æ–º –¥–Ω—è–º: \n<b>5.03-15.03</b>\n' \
                      '\n–Ø–∫—â–æ —Ä–æ–∑–∫–ª–∞–¥ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤–≤–µ–¥–∏ –º–µ–Ω—à—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤.' \
                      '\n–î–∞—Ç–∞ –≤–≤–æ–¥–∏—Ç—å—Å—è –±–µ–∑ –ø—Ä–æ–±—ñ–ª—ñ–≤ (–¥–µ–Ω—å.–º—ñ—Å—è—Ü—å)<b> —Ä—ñ–∫ –≤–≤–æ–¥–∏—Ç–∏ –Ω–µ —Ç—Ä–µ–±–∞</b> '
                timetable_for_days = '–ù–∞ <b>{} - {}</b>, –¥–ª—è –≥—Ä—É–ø–∏ <b>{}</b> –ø–∞—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n\n{}'.format(s_date,
                                                                                                            e_date,
                                                                                                            user_group,
                                                                                                            msg)
            else:
                return

            bot.send_message(user.get_id(), timetable_for_days, parse_mode='HTML', reply_markup=keyboard)

        elif request == KEYBOARD['MAIN_MENU']:
            bot.send_message(user.get_id(), '–û–∫', reply_markup=keyboard)

        else:
            answers = ['–º?', '—Ö–º.. \U0001F914', '–Ω–µ —Ä–æ–∑—É–º—ñ—é(', '–≤–∏–±–µ—Ä–∏ –ø–æ—Ç—Ä—ñ–±–Ω–µ –≤ –º–µ–Ω—é', '–º–æ—è —Ç–≤–æ—è –Ω–µ –ø–æ–Ω—ñ–º–∞—Ç—å']
            bot.send_message(user.get_id(), random.choice(answers), reply_markup=keyboard)

    else:
        bot.send_message(user.get_id(), '–ù–µ –∑–Ω–∞–π—à–æ–≤ —Ç–≤–æ—é –≥—Ä—É–ø—É. –í–≤–µ–¥–∏ /start, —ñ –≤–∫–∞–∂–∏ —ó—ó.')


def main():

    core.User.create_user_table_if_not_exists()
    core.Cache.create_cache_table_if_not_exists()
    core.MetricsManager.create_metrics_table_if_not_exists()

    bot.delete_webhook()

    if settings.USE_WEBHOOK:
        try:
            bot.set_webhook(settings.WEBHOOK_URL + settings.WEBHOOK_PATH, max_connections=1)
            core.log(m='Webhook is setting: {}'.format(bot.get_webhook_info().url))

        except Exception as ex:
            core.log(m='Error while setting webhook: {}'.format(str(ex)))

    try:
        core.log(m='Running..')
        bot.polling(none_stop=True, interval=settings.POLLING_INTERVAL)

    except Exception as ex:

        core.log(m='Working error: {}\n'.format(str(ex)))
        bot.stop_polling()

        if settings.SEND_ERRORS_TO_ADMIN:
            for admin in settings.ADMINS_ID:
                data = {
                    'chat_id': admin,
                    'text': 'Something go wrong.\nError: {}'.format(str(ex))
                }

                requests.get('https://api.telegram.org/bot{}/sendMessage'.format(settings.BOT_TOKEN), params=data)


if __name__ == "__main__":
    #main()
    app.run(debug=True)
